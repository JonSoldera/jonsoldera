<!doctype html>
<html>

<head>
    <meta charset="utf-8">
    <title>Midjourney Text-to-Image</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD" crossorigin="anonymous">

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-w76AqPfDkMBDXo30jS1Sgez6pr3x5MlQ1ZAGC+nuZB+EYdgRZgiwxhTBTkF7CXvN"
        crossorigin="anonymous"></script>

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootswatch@4.5.2/dist/cerulean/bootstrap.min.css"
        integrity="sha384-3fdgwJw17Bi87e1QQ4fsLn4rUFqWw//KU0g8TvV6quvahISRewev6/EocKNuJmEw" crossorigin="anonymous">
    <style>
        #computed-prompt-div {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            z-index: 999;
            width: 100%;
            padding-left: 20px;
            padding-right: 20px;
            padding-bottom: 15px;
            padding-top: 15px;
            background: #EEF;
            border: 1px solid #AAA;
        }

        label {
            margin-top: 10px;
            font-weight: bold;
        }

        input[type="checkbox"] {
            height: 1.5em;
            width: 1.5em;
            border: 1px solid #AAA;
        }

        .label-checkbox {
            margin-left: 0.6em;
        }
    </style>

</head>

<body style="background-color: #f5f5f5;font-family: 'Roboto', sans-serif;padding-bottom:150px">
    <h1 style="text-align: center; margin-bottom: 20px;">Midjourney Prompt Generator</h1>
    <div id="description" style="text-align: center; margin-bottom: 20px;">
        <p>This webapp generates a Midjourney prompt from a text input and various options. Simply enter the prompt and
            the desired options below and the app will generate the prompt for you.</p>
    </div>

    <!-- HTML form with input fields for the parameters -->
    <!-- HTML form with input fields for the parameters -->
    <form id="form" class="form" style="margin: 20px;">
        <div class="form-group-prompt">
            <label for="prompt">Prompt</label>
            <p>Enter the text for the prompt here.</p>
            <textarea class="form-control" id="prompt" name="prompt" rows="3"></textarea>
        </div>

        <div style="display: flex;align-items: flex-end;">
            <div class="form-group" style="flex: 1;padding:30px;">
                <label for="ar">Aspect Ratio (AR)</label>
                <p>Generates images with the desired aspect ratio. Enter the desired aspect ratio in the format "W:H",
                    for
                    example "16:9" for a 16:9 aspect ratio (~448x256).</p>
                <input type="text" class="form-control" id="ar" name="ar" placeholder="W:H">
            </div>

            <div class="form-group" style="flex: 1;padding:30px;">
                <label for="w">Width (W)</label>
                <p>Sets the width of the image. The value must be between 256 and 2034, while keeping in mind that the
                    maximum upscale resolution is around 3 Megapixels. These values work better as multiples of 64 (or
                    128
                    for "--hd").</p>
                <input type="number" class="form-control" id="w" name="w" min="256" max="2034">
            </div>

            <div class="form-group" style="flex: 1;padding:30px">
                <label for="h">Height (H)</label>
                <p>Sets the height of the image. The value must be between 256 and 2034, while keeping in mind that the
                    maximum upscale resolution is around 3 Megapixels. These values work better as multiples of 64 (or
                    128
                    for "--hd").</p>
                <input type="number" class="form-control" id="h" name="h" min="256" max="2034">
            </div>
        </div>

        <div style="display: flex;align-items: flex-end;">
            <div class="form-group" style="flex: 1;padding:30px;">
                <label for="seed">Seed</label>
                <p>Sets the seed, which can sometimes help keep things more steady and reproducible when trying to
                    generate
                    a similar prompt again. It must be a positive integer (any whole number between 0 and 4294967295).
                    If
                    not used, a random seed will be chosen instead, behind the scenes.</p>
                <input type="number" class="form-control" id="seed" name="seed" min="0" max="4294967295">
            </div>


            <div class="form-group" style="flex: 1;padding:30px;">
                <label for="no">Negative Prompting (No)</label>
                <p>Negative prompting (`--no plants` would try to remove plants). Equivalent to using an advanced text
                    weight of `::-0.5`.</p>
                <input type="text" class="form-control" id="no" name="no" placeholder="thing to remove">
            </div>

            <div class="form-group" style="flex: 1;padding:30px;">
                <label for="iw">Image Weight (IW)</label>
                <p>Sets image prompt weight relative to text weight. The default value is 0.25.</p>
                <input type="number" class="form-control" id="iw" name="iw" min="-1" max="1" step="0.1">
            </div>
        </div>

        <div style="display: flex;align-items: flex-end;">
            <div class="form-group" style="flex: 1;padding:30px;">
                <label for="stylize">Stylize</label>
                <p>The stylize argument sets how strong of a 'stylization' your images have, the higher you set it, the
                    more
                    opinionated it will be. The default value is 2500. See below for more info.</p>
                <input type="number" class="form-control" id="stylize" name="stylize" min="625" max="60000">
            </div>

            <div class="form-group" style="flex: 1;padding:30px;">
                <label for="quality">Quality</label>
                <p>How much rendering quality time you want to spend. The default value is 1. Higher values cost more
                    and
                    lower values cost less.</p>
                <input type="number" class="form-control" id="quality" name="quality" min="0" max="5" step="0.5">
            </div>

            <div class="form-group" style="flex: 1;padding:30px;">
                <label for="chaos">Chaos</label>
                <p>How much more varied, random, and different the results will be. Must be between 0-100. Higher values
                    will favor more interesting and unusual generations in exchange for less reliable compositions.</p>
                <input type="number" class="form-control" id="chaos" name="chaos" min="0" max="100">
            </div>
        </div>

        <div style="display: flex;align-items: flex-end;">
            <div class="form-group" style="flex: 1;padding:30px;">
                <label for="stop">Stop</label>
                <p>Stop the generation at an earlier percentage. Must be between 10-100. This currently does not work
                    with
                    upscales.</p>
                <input type="number" class="form-control" id="stop" name="stop" min="10" max="100">
            </div>


            <div class="form-group" style="flex: 1;padding:30px;">
                <label for="version">Version</label>
                <p>Uses old algorithms 1 (which was formerly the "vibe" option, sometimes better for macro or textures)
                    or
                    2, the last improvement. We are at version 3 now, which you do not need to specify. So specify
                    `--version 2` to use the previous older model, or `--version 1` for the one before.</p>
                <select class="form-control" id="version" name="version">
                    <option value=""></option>
                    <option value="1">1 (oldest)</option>
                    <option value="2">2</option>
                    <option value="3">3</option>
                    <option value="4">4</option>
                </select>
            </div>
            <div class="form-group" style="flex: 1;padding:30px;">
                <label for="version">Art Medium</label>
                <p>Art Medium. Choose an option or leave it blank.</p>
                <select id="art-medium" class="full-text-option">
                    <option value=""></option>
                    <option value="acrylic">Acrylic</option>
                    <option value="watercolor">Watercolor</option>
                    <option value="oil">Oil</option>
                    <option value="pastel">Pastel</option>
                    <option value="pen-ink">Pen and ink</option>
                    <option value="graphite">Graphite</option>
                    <option value="charcoal">Charcoal</option>
                    <option value="colored-pencil">Colored pencil</option>
                    <option value="marker">Marker</option>
                    <option value="pencil-crayon">Pencil crayon</option>
                    <option value="clay">Clay</option>
                    <option value="sculpture">Sculpture</option>
                    <option value="photography">Photography</option>
                    <option value="printmaking">Printmaking</option>
                    <option value="collage">Collage</option>
                    <option value="assemblage">Assemblage</option>
                    <option value="textile-art">Textile art</option>
                    <option value="digital-art">Digital art</option>
                </select>
            </div>
        </div>

        <div style="display: flex;align-items: flex-start;">
            <div class="form-check" style="flex: 1;padding:30px;">
                <input class="form-check-input" type="checkbox" value="" id="beta">
                <label class="form-check-label label-checkbox" for="beta">
                    Beta
                </label>
                <p>Uses a new experimental algorithm. This model takes significantly longer to run and only produces 2
                    outputs (1 for non square resolutions). It also does not work with `--hd`, `--stylize`, and `--q 5`.
                </p>
            </div>

            <div class="form-check" style="flex: 1;padding:30px;">
                <input class="form-check-input" type="checkbox" value="" id="hd">
                <label class="form-check-label label-checkbox" for="hd">
                    HD
                </label>
                <p>Uses a different, older algorithm that’s potentially better for larger images, but with less
                    consistent
                    composition. Best for abstract and landscape prompts. This also generates images at higher
                    resolutions
                    without the need to upscale.</p>
            </div>

            <div class="form-check" style="flex: 1;padding:30px;">
                <input class="form-check-input" type="checkbox" value="" id="sameseed">
                <label class="form-check-label label-checkbox" for="sameseed">
                    Same Seed
                </label>
                <p>Makes it so the seed affects all images of the resulting grid in the same way. If not used, each
                    image in
                    the grid will use a different "slice" of the seed, providing higher variety.</p>
            </div>
        </div>

        <div style="display: flex;align-items: flex-start;">

            <div class="form-check" style="flex: 1;padding:30px;">
                <input class="form-check-input" type="checkbox" value="" id="video">
                <label class="form-check-label label-checkbox" for="video">
                    Video
                </label>
                <p>Saves a progress video, which is sent to you in the ✉️-triggered DM (you must react with the envelope
                    to
                    get the video link). This currently does not work with upscales.</p>
            </div>

            <div class="form-check" style="flex: 1;padding:30px;">
                <input class="form-check-input" type="checkbox" value="" id="uplight">
                <label class="form-check-label label-checkbox" for="uplight">
                    Uplight
                </label>
                <p>Uses the "light" upscaler when selecting the U buttons. Results are then closer to the original
                    image,
                    with less detail added during upscale. Ideal for faces and smooth surfaces.</p>
            </div>
            <div style="flex: 1;padding:30px;">

            </div>

        </div>
    </form>


    <div id="computed-prompt-div">
        <!-- Textarea to display the prompt string -->
        <textarea id="computed-prompt" readonly="true" class="form-control" rows="3"></textarea>

        <!-- "Copy to clipboard" button -->
        <button id="copy-button" class="btn btn-primary">Copy to clipboard</button>
    </div>
    <!-- JavaScript code to handle the input fields and update the prompt string -->
    <script>
        function generatePrompt() {
            // get all form elements
            const formElements = document.querySelectorAll('input, select, textarea');

            // start building the command
            let command = '';

            // add the prompt
            command += ` ${document.getElementById('prompt').value}`;

            // add the other form elements
            formElements.forEach(element => {
                if (element.type === 'checkbox') {
                    if (element.checked) {
                        command += ` --${element.id}`;
                    }
                } else if (element.id !== 'computed-prompt' && element.id !== 'prompt' && element.value) {
                    if (element.classList.contains('full-text-option')){
                        command += ` ${element.value}`;
                    } else {
                        command += ` --${element.name} ${element.value}`;
                    }


                }
            });

            // update the prompt textarea
            document.getElementById('computed-prompt').value = command;
        }

        // update the prompt when any form element is changed
        document.querySelectorAll('input, select, textarea').forEach(element => {
            element.addEventListener('input', generatePrompt);
        });

        // Copy the prompt string to the clipboard when the "Copy to clipboard" button is clicked
        document.getElementById('copy-button').addEventListener('click', () => {
            document.getElementById('computed-prompt').select();
            document.execCommand('copy');
        });
    </script>
</body>

</html>